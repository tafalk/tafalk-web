version: 2.1

# YAML Anchors
node-image: &node-image
  docker:
    - image: circleci/node:latest

# Use a package of configuration called an orb, see https://circleci.com/docs/2.0/orb-intro/
jobs:
  install:
    <<: *node-image
    parallelism: 1
    steps:
      - checkout
      - restore_cache:
          keys:
            - node-v1-{{ .Branch }}-{{ checksum "package-lock.json" }}
            - node-v1-{{ .Branch }}-
            - node-v1-
      - run:
          name: Install dependencies
          command: npm i
      - save_cache:
          key: node-v1-{{ .Branch }}-{{ checksum "package-lock.json" }}
          paths:
            - node_modules
      - persist_to_workspace:
          root: ~/
          paths:
            - project

  lint:
    <<: *node-image
    parallelism: 1
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Run linter
          command: npm run lint

  unit-test:
    <<: *node-image
    parallelism: 1
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Run unit tests
          command: echo "No tests for now :("
          # command: npm run test:unit

  build:
    <<: *node-image
    parallelism: 1
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Build app
          command: npm run build
          no_output_timeout: 15m
      - persist_to_workspace:
          root: ~/
          paths:
            - project/dist

  deploy:
    <<: *node-image
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Deploy to AWS S3
          command: npm run deploy

# Orchestrate or schedule a set of jobs, see https://circleci.com/docs/2.0/workflows/
workflows:
  main:
    jobs:
      - install:
          pre-steps:
            - run:
                command: echo "installing dependencies..."
          post-steps:
            - run:
                command: echo "successfully installed dependencies."
      - lint:
          requires:
            - install
          post-steps:
            - run:
                command: echo "linted the code."
      - unit-test:
          requires:
            - install
          pre-steps:
            - run:
                command: echo "running unit tests..."
          post-steps:
            - run:
                command: echo "successfully run unit tests!"
      - build:
          requires:
            - install
          pre-steps:
            - run:
                command: echo "building..."
          post-steps:
            - run:
                command: echo "successfully built!"
      - deploy:
          requires:
            - lint
            - unit-test
            - build
          pre-steps:
            - run:
                command: echo "deploying..."
          post-steps:
            - run:
                command: echo "successfully deployed!"
          filters:
            branches:
              only: master